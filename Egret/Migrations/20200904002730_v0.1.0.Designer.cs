// <auto-generated />
using System;
using Egret.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Egret.Migrations
{
    [DbContext(typeof(EgretDbContext))]
    [Migration("20200904002730_v0.1.0")]
    partial class v010
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.access_groups_id_seq", "'access_groups_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.consumption_events_id_seq", "'consumption_events_id_seq', '', '1000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.currency_types_id_seq", "'currency_types_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.fabric_tests_id_seq", "'fabric_tests_id_seq', '', '1000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.inventory_categories_id_seq", "'inventory_categories_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.items_id_seq", "'items_id_seq', '', '1000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.storage_location_id_seq", "'storage_location_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.units_id_seq", "'units_id_seq', '', '100', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Egret.Models.AccessGroup", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("access_group_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('access_groups_id_seq'::regclass)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("AccessGroupId")
                        .HasName("pk_access_groups");

                    b.ToTable("access_groups");

                    b.HasData(
                        new
                        {
                            AccessGroupId = 1,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Egret.Models.AccessGroupRole", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .HasColumnName("access_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("AccessGroupId", "RoleId")
                        .HasName("pk_access_group_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_access_group_roles_role_id");

                    b.ToTable("access_group_roles");

                    b.HasData(
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "faffc6d3-f72f-4b64-b208-3c7cfec71270"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "a08e13a5-00a8-4d7d-9aaf-c0d3a816e48b"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "9de4e55f-b26c-4b62-812a-cf52000b97bf"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "6ce169eb-8cfc-49da-9306-15e41ef13562"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "bcabe6d9-e245-40f8-ad4a-38f76ee73614"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "a56ff8b3-479f-4d1c-aed3-b1b7ec5d6998"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "a8a0c676-d58e-4be3-94db-ca7a5198692a"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "d6206540-4ba5-4dce-a608-37ba6523be27"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "d9fe7909-63eb-496f-a81c-bcff6f0456c5"
                        },
                        new
                        {
                            AccessGroupId = 1,
                            RoleId = "f6bb4564-6919-484b-897b-4a2c994721e5"
                        });
                });

            modelBuilder.Entity("Egret.Models.ConsumptionEvent", b =>
                {
                    b.Property<string>("ConsumptionEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumption_event_id")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'CE' || nextval('consumption_events_id_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("added_by")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("text");

                    b.Property<string>("ConsumedBy")
                        .IsRequired()
                        .HasColumnName("consumed_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("date_added")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateConsumed")
                        .IsRequired()
                        .HasColumnName("date_consumed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("date_updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InventoryItemId")
                        .IsRequired()
                        .HasColumnName("inventory_item_id")
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("text");

                    b.Property<string>("PatternNumber")
                        .HasColumnName("pattern_number")
                        .HasColumnType("text");

                    b.Property<decimal?>("QuantityConsumed")
                        .IsRequired()
                        .HasColumnName("quantity_consumed")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("ConsumptionEventId")
                        .HasName("pk_consumption_events");

                    b.HasIndex("ConsumedBy")
                        .HasName("ix_consumption_events_consumed_by");

                    b.HasIndex("DateAdded")
                        .HasName("ix_consumption_events_date_added");

                    b.HasIndex("InventoryItemId")
                        .HasName("ix_consumption_events_inventory_item_id");

                    b.HasIndex("OrderNumber")
                        .HasName("ix_consumption_events_order_number");

                    b.ToTable("consumption_events");
                });

            modelBuilder.Entity("Egret.Models.CurrencyType", b =>
                {
                    b.Property<int>("CurrencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("currency_type_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('currency_types_id_seq'::regclass)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.HasKey("CurrencyTypeId")
                        .HasName("pk_currency_types");

                    b.HasIndex("Abbreviation")
                        .IsUnique()
                        .HasName("ix_currency_types_abbreviation");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_currency_types_name");

                    b.ToTable("currency_types");

                    b.HasData(
                        new
                        {
                            CurrencyTypeId = 1,
                            Abbreviation = "NRP",
                            Name = "Nepali Rupees",
                            Symbol = "रु"
                        });
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.Property<string>("FabricTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fabric_test_id")
                        .HasColumnType("text")
                        .HasDefaultValueSql("nextval('fabric_tests_id_seq'::regclass)");

                    b.Property<string>("InventoryItemId")
                        .HasColumnName("inventory_item_id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("text");

                    b.HasKey("FabricTestId")
                        .HasName("pk_fabric_tests");

                    b.HasIndex("InventoryItemId")
                        .HasName("ix_fabric_tests_inventory_item_id");

                    b.ToTable("fabric_tests");
                });

            modelBuilder.Entity("Egret.Models.InventoryCategory", b =>
                {
                    b.Property<int>("InventoryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_category_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('inventory_categories_id_seq'::regclass)");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.HasKey("InventoryCategoryId")
                        .HasName("pk_inventory_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_inventory_categories_name");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("ix_inventory_categories_sort_order");

                    b.ToTable("inventory_categories");

                    b.HasData(
                        new
                        {
                            InventoryCategoryId = 1,
                            Active = true,
                            Description = "",
                            Name = "Elastic",
                            SortOrder = 1
                        },
                        new
                        {
                            InventoryCategoryId = 2,
                            Active = true,
                            Description = "",
                            Name = "Fastener",
                            SortOrder = 2
                        },
                        new
                        {
                            InventoryCategoryId = 3,
                            Active = true,
                            Description = "",
                            Name = "Knit",
                            SortOrder = 3
                        },
                        new
                        {
                            InventoryCategoryId = 4,
                            Active = true,
                            Description = "",
                            Name = "Labels and Tags",
                            SortOrder = 4
                        },
                        new
                        {
                            InventoryCategoryId = 5,
                            Active = true,
                            Description = "",
                            Name = "Leather",
                            SortOrder = 5
                        },
                        new
                        {
                            InventoryCategoryId = 6,
                            Active = true,
                            Description = "",
                            Name = "Other",
                            SortOrder = 6
                        },
                        new
                        {
                            InventoryCategoryId = 7,
                            Active = true,
                            Description = "",
                            Name = "Thread",
                            SortOrder = 7
                        },
                        new
                        {
                            InventoryCategoryId = 8,
                            Active = true,
                            Description = "",
                            Name = "Woven",
                            SortOrder = 8
                        },
                        new
                        {
                            InventoryCategoryId = 9,
                            Active = true,
                            Description = "",
                            Name = "Zipper",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_item_id")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'I' || nextval('items_id_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("added_by")
                        .HasColumnType("text");

                    b.Property<bool>("BondedWarehouse")
                        .HasColumnName("bonded_warehouse")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPurchasedFor")
                        .IsRequired()
                        .HasColumnName("customer_purchased_for")
                        .HasColumnType("text");

                    b.Property<string>("CustomerReservedFor")
                        .IsRequired()
                        .HasColumnName("customer_reserved_for")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("date_added")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateArrived")
                        .HasColumnName("date_arrived")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateConfirmed")
                        .HasColumnName("date_confirmed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateShipped")
                        .HasColumnName("date_shipped")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("date_updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<decimal?>("FobCost")
                        .IsRequired()
                        .HasColumnName("fob_cost")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ImportCost")
                        .IsRequired()
                        .HasColumnName("import_cost")
                        .HasColumnType("numeric");

                    b.Property<int?>("InventoryCategoryId")
                        .IsRequired()
                        .HasColumnName("inventory_category_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("QuantityPurchased")
                        .IsRequired()
                        .HasColumnName("quantity_purchased")
                        .HasColumnType("numeric");

                    b.Property<string>("QuantityToPurchaseNow")
                        .HasColumnName("quantity_to_purchase_now")
                        .HasColumnType("text");

                    b.Property<string>("ShippingCompany")
                        .HasColumnName("shipping_company")
                        .HasColumnType("text");

                    b.Property<decimal?>("ShippingCost")
                        .IsRequired()
                        .HasColumnName("shipping_cost")
                        .HasColumnType("numeric");

                    b.Property<int?>("StorageLocationId")
                        .HasColumnName("storage_location_id")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .HasColumnName("supplier")
                        .HasColumnType("text");

                    b.Property<string>("TargetPrice")
                        .HasColumnName("target_price")
                        .HasColumnType("text");

                    b.Property<int?>("UnitId")
                        .IsRequired()
                        .HasColumnName("unit_id")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.Property<decimal?>("VatCost")
                        .IsRequired()
                        .HasColumnName("vat_cost")
                        .HasColumnType("numeric");

                    b.HasKey("InventoryItemId")
                        .HasName("pk_inventory_items");

                    b.HasIndex("InventoryCategoryId")
                        .HasName("ix_inventory_items_inventory_category_id");

                    b.HasIndex("StorageLocationId")
                        .HasName("ix_inventory_items_storage_location_id");

                    b.HasIndex("UnitId")
                        .HasName("ix_inventory_items_unit_id");

                    b.ToTable("inventory_items");
                });

            modelBuilder.Entity("Egret.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = "faffc6d3-f72f-4b64-b208-3c7cfec71270",
                            DisplayName = "Item Create",
                            Name = "Item_Create",
                            NormalizedName = "ITEM_CREATE"
                        },
                        new
                        {
                            Id = "a08e13a5-00a8-4d7d-9aaf-c0d3a816e48b",
                            DisplayName = "Item Read",
                            Name = "Item_Read",
                            NormalizedName = "ITEM_READ"
                        },
                        new
                        {
                            Id = "9de4e55f-b26c-4b62-812a-cf52000b97bf",
                            DisplayName = "Item Update",
                            Name = "Item_Edit",
                            NormalizedName = "ITEM_EDIT"
                        },
                        new
                        {
                            Id = "6ce169eb-8cfc-49da-9306-15e41ef13562",
                            DisplayName = "Item Delete",
                            Name = "Item_Delete",
                            NormalizedName = "ITEM_DELETE"
                        },
                        new
                        {
                            Id = "bcabe6d9-e245-40f8-ad4a-38f76ee73614",
                            DisplayName = "Consumption Event Create",
                            Name = "ConsumptionEvent_Create",
                            NormalizedName = "CONSUMPTIONEVENT_CREATE"
                        },
                        new
                        {
                            Id = "a56ff8b3-479f-4d1c-aed3-b1b7ec5d6998",
                            DisplayName = "Consumption Event Read",
                            Name = "ConsumptionEvent_Read",
                            NormalizedName = "CONSUMPTIONEVENT_READ"
                        },
                        new
                        {
                            Id = "a8a0c676-d58e-4be3-94db-ca7a5198692a",
                            DisplayName = "Consumption Event Update",
                            Name = "ConsumptionEvent_Edit",
                            NormalizedName = "CONSUMPTIONEVENT_EDIT"
                        },
                        new
                        {
                            Id = "d6206540-4ba5-4dce-a608-37ba6523be27",
                            DisplayName = "Consumption Event Delete",
                            Name = "ConsumptionEvent_Delete",
                            NormalizedName = "CONSUMPTIONEVENT_DELETE"
                        },
                        new
                        {
                            Id = "d9fe7909-63eb-496f-a81c-bcff6f0456c5",
                            DisplayName = "Administrator Access",
                            Name = "Admin_Access",
                            NormalizedName = "ADMIN_ACCESS"
                        },
                        new
                        {
                            Id = "f6bb4564-6919-484b-897b-4a2c994721e5",
                            DisplayName = "Report Read",
                            Name = "Report_Read",
                            NormalizedName = "REPORT_READ"
                        });
                });

            modelBuilder.Entity("Egret.Models.StorageLocation", b =>
                {
                    b.Property<int>("StorageLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("storage_location_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('storage_location_id_seq'::regclass)");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.HasKey("StorageLocationId")
                        .HasName("pk_storage_locations");

                    b.ToTable("storage_locations");
                });

            modelBuilder.Entity("Egret.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("unit_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('units_id_seq'::regclass)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.HasKey("UnitId")
                        .HasName("pk_units");

                    b.HasIndex("Abbreviation")
                        .IsUnique()
                        .HasName("ix_units_abbreviation");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_units_name");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("ix_units_sort_order");

                    b.ToTable("units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Abbreviation = "kg",
                            Active = true,
                            Name = "kilogram",
                            SortOrder = 1
                        },
                        new
                        {
                            UnitId = 2,
                            Abbreviation = "m",
                            Active = true,
                            Name = "meter",
                            SortOrder = 2
                        },
                        new
                        {
                            UnitId = 3,
                            Abbreviation = "piece",
                            Active = true,
                            Name = "piece",
                            SortOrder = 3
                        },
                        new
                        {
                            UnitId = 4,
                            Abbreviation = "set",
                            Active = true,
                            Name = "set",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("Egret.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = "20551684-b958-4581-af23-96c1528b0e29",
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "2cebd9d0-694d-4ed3-8dc2-384f41557310",
                            Email = "bob@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@EXAMPLE.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAEAACcQAAAAEI4jEmRsUYzL6KnpR2/OjIPvkI9BWNmnnCZYah1GFvB2EOCWkgkk49YqCJBz38N8rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3YILVFJYDKC4OK7QLLR4TO4KT6V4ZK5E",
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        });
                });

            modelBuilder.Entity("Egret.Models.UserAccessGroup", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .HasColumnName("access_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("AccessGroupId", "UserId")
                        .HasName("pk_user_access_groups");

                    b.HasIndex("UserId")
                        .HasName("ix_user_access_groups_user_id");

                    b.ToTable("user_access_groups");

                    b.HasData(
                        new
                        {
                            AccessGroupId = 1,
                            UserId = "20551684-b958-4581-af23-96c1528b0e29"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "faffc6d3-f72f-4b64-b208-3c7cfec71270"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "a08e13a5-00a8-4d7d-9aaf-c0d3a816e48b"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "9de4e55f-b26c-4b62-812a-cf52000b97bf"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "6ce169eb-8cfc-49da-9306-15e41ef13562"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "bcabe6d9-e245-40f8-ad4a-38f76ee73614"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "a56ff8b3-479f-4d1c-aed3-b1b7ec5d6998"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "a8a0c676-d58e-4be3-94db-ca7a5198692a"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "d6206540-4ba5-4dce-a608-37ba6523be27"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "d9fe7909-63eb-496f-a81c-bcff6f0456c5"
                        },
                        new
                        {
                            UserId = "20551684-b958-4581-af23-96c1528b0e29",
                            RoleId = "f6bb4564-6919-484b-897b-4a2c994721e5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("Egret.Models.AccessGroupRole", b =>
                {
                    b.HasOne("Egret.Models.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupRoles")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("fk_access_group_roles_access_groups_access_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egret.Models.Role", "Role")
                        .WithMany("AccessGroupRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_access_group_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egret.Models.ConsumptionEvent", b =>
                {
                    b.HasOne("Egret.Models.InventoryItem", "InventoryItemNavigation")
                        .WithMany("ConsumptionEventsNavigation")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("fk_consumption_events_inventory_items_inventory_item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.HasOne("Egret.Models.InventoryItem", "InventoryItemNavigation")
                        .WithMany("FabricTestsNavigation")
                        .HasForeignKey("InventoryItemId")
                        .HasConstraintName("fk_fabric_tests_inventory_items_inventory_item_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.HasOne("Egret.Models.InventoryCategory", "CategoryNavigation")
                        .WithMany()
                        .HasForeignKey("InventoryCategoryId")
                        .HasConstraintName("fk_inventory_items_inventory_categories_inventory_category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Egret.Models.StorageLocation", "StorageLocationNavigation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .HasConstraintName("fk_inventory_items_storage_locations_storage_location_id");

                    b.HasOne("Egret.Models.Unit", "UnitNavigation")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_inventory_items_units_unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egret.Models.UserAccessGroup", b =>
                {
                    b.HasOne("Egret.Models.AccessGroup", "AccessGroup")
                        .WithMany("UserAccessGroups")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("fk_user_access_groups_access_groups_access_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egret.Models.User", "User")
                        .WithMany("UserAccessGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_access_groups_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Egret.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egret.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egret.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Egret.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Egret.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egret.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
