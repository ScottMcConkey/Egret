// <auto-generated />
using System;
using Egret.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Egret.Migrations
{
    [DbContext(typeof(EgretContext))]
    [Migration("20180607212701_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", "'adminpack', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.currency_types_sortorder_seq", "'currency_types_sortorder_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.inventory_categories_id_seq", "'inventory_categories_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.master_seq", "'master_seq', '', '1000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.units_id_seq", "'units_id_seq', '', '100', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Egret.DataAccess.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("suppliers_pkey");

                    b.ToTable("suppliers","public");
                });

            modelBuilder.Entity("Egret.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<bool>("DefaultSelection")
                        .HasColumnName("defaultselection");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sortorder")
                        .HasDefaultValueSql("nextval('currency_types_sortorder_seq'::regclass)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique()
                        .HasName("currency_types_abbreviation_key");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("currency_types_sort_key");

                    b.ToTable("currency_types");

                    b.HasData(
                        new { Id = 1, Abbreviation = "USD", Active = true, DefaultSelection = false, Name = "United States Dollars", SortOrder = 1, Symbol = "$" },
                        new { Id = 2, Abbreviation = "NRP", Active = true, DefaultSelection = true, Name = "Nepali Rupees", SortOrder = 2, Symbol = "रु" },
                        new { Id = 3, Abbreviation = "INR", Active = true, DefaultSelection = false, Name = "Indian Rupees", SortOrder = 3, Symbol = "₹" }
                    );
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InventoryItemCode");

                    b.Property<string>("Name");

                    b.Property<string>("Result");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemCode");

                    b.ToTable("FabricTest");
                });

            modelBuilder.Entity("Egret.Models.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('inventory_categories_id_seq'::regclass)");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sortorder");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("inventory_categories_name_key");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("inventory_categories_sort_key");

                    b.ToTable("inventory_categories");

                    b.HasData(
                        new { Id = 1, Active = true, Description = "", Name = "Buckle Thread", SortOrder = 1 },
                        new { Id = 2, Active = true, Description = "", Name = "Button", SortOrder = 2 },
                        new { Id = 3, Active = true, Description = "", Name = "Elastic", SortOrder = 3 },
                        new { Id = 4, Active = true, Description = "", Name = "Hang-Tag", SortOrder = 4 },
                        new { Id = 5, Active = true, Description = "", Name = "Knit Fabric", SortOrder = 5 },
                        new { Id = 6, Active = true, Description = "", Name = "Label", SortOrder = 6 },
                        new { Id = 7, Active = true, Description = "", Name = "Leather", SortOrder = 7 },
                        new { Id = 8, Active = true, Description = "", Name = "Other", SortOrder = 8 },
                        new { Id = 9, Active = true, Description = "", Name = "Snap", SortOrder = 9 },
                        new { Id = 10, Active = true, Description = "", Name = "Woven Fabric", SortOrder = 10 },
                        new { Id = 11, Active = true, Description = "", Name = "Zipper", SortOrder = 11 }
                    );
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code")
                        .HasDefaultValueSql("nextval('master_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("useraddedby");

                    b.Property<string>("ApproxProdQty")
                        .HasColumnName("approxprodqty");

                    b.Property<bool?>("BondedWarehouse")
                        .HasColumnName("bondedwarehouse");

                    b.Property<string>("Buycurrency")
                        .HasColumnName("buycurrency");

                    b.Property<decimal?>("Buyprice")
                        .HasColumnName("buyprice");

                    b.Property<int?>("Buyunit")
                        .HasColumnName("buyunit_fk");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("ConversionSource")
                        .HasColumnName("conversionsource");

                    b.Property<string>("CustomerPurchasedFor")
                        .HasColumnName("customerpurchasedfor");

                    b.Property<string>("CustomerReservedFor")
                        .HasColumnName("customerreservedfor");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateArrived")
                        .HasColumnName("datearrived");

                    b.Property<DateTime?>("DateConfirmed")
                        .HasColumnName("dateconfirmed");

                    b.Property<DateTime?>("DateShipped")
                        .HasColumnName("dateshipped");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<decimal?>("FOBCost")
                        .HasColumnName("fobcost");

                    b.Property<string>("FabricTestResults")
                        .HasColumnName("fabrictestresults");

                    b.Property<string>("FabricTests_Conversion")
                        .HasColumnName("fabrictests_conversion");

                    b.Property<decimal?>("ImportCosts")
                        .HasColumnName("importcosts");

                    b.Property<bool>("IsConversion");

                    b.Property<DateTime?>("NeededBefore")
                        .HasColumnName("neededbefore");

                    b.Property<decimal?>("QtyPurchased")
                        .HasColumnName("qtypurchased");

                    b.Property<string>("QtyToPurchaseNow")
                        .HasColumnName("qtytopurchasenow");

                    b.Property<string>("Sellcurrency")
                        .HasColumnName("sellcurrency");

                    b.Property<decimal?>("Sellprice")
                        .HasColumnName("sellprice");

                    b.Property<int?>("Sellunit")
                        .HasColumnName("sellunit_fk");

                    b.Property<string>("ShippingCompany")
                        .HasColumnName("shippingcompany");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnName("shippingcost");

                    b.Property<int?>("Supplier")
                        .HasColumnName("supplier_fk");

                    b.Property<string>("TargetPrice")
                        .HasColumnName("targetprice");

                    b.Property<string>("Unit")
                        .HasColumnName("unit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("userupdatedby");

                    b.HasKey("Code");

                    b.HasIndex("Buycurrency");

                    b.HasIndex("Buyunit");

                    b.HasIndex("Category");

                    b.HasIndex("Sellcurrency");

                    b.HasIndex("Sellunit");

                    b.ToTable("inventory_items");
                });

            modelBuilder.Entity("Egret.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('units_id_seq'::regclass)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sortorder");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique()
                        .HasName("units_abbreviation_key");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("units_sort_key");

                    b.ToTable("units");

                    b.HasData(
                        new { Id = 1, Abbreviation = "kg", Active = true, Name = "kilograms", SortOrder = 1 },
                        new { Id = 2, Abbreviation = "m", Active = true, Name = "meters", SortOrder = 2 },
                        new { Id = 3, Abbreviation = "ea", Active = true, Name = "each", SortOrder = 3 },
                        new { Id = 4, Abbreviation = "g/m2", Active = true, Name = "grams per square meter", SortOrder = 4 },
                        new { Id = 5, Abbreviation = "cm", Active = true, Name = "centimeters", SortOrder = 5 },
                        new { Id = 6, Abbreviation = "sqf", Active = true, Name = "square feet", SortOrder = 6 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("aspnet_roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("aspnet_users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Egret.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");


                    b.ToTable("aspnet_roles");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Egret.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool?>("IsActive");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("aspnet_users");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.HasOne("Egret.Models.InventoryItem", "InventoryItem")
                        .WithMany("FabricTests")
                        .HasForeignKey("InventoryItemCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.HasOne("Egret.Models.CurrencyType", "BuycurrencyNavigation")
                        .WithMany("InventoryItemsBuycurrencyNavigation")
                        .HasForeignKey("Buycurrency")
                        .HasConstraintName("inventory_items_buycurrency_fk")
                        .HasPrincipalKey("Abbreviation")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Egret.Models.Unit", "BuyunitNavigation")
                        .WithMany("InventoryItemsBuyunitNavigation")
                        .HasForeignKey("Buyunit")
                        .HasConstraintName("inventory_items_buyunit_fk")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Egret.Models.InventoryCategory", "CategoryNavigation")
                        .WithMany("InventoryItems")
                        .HasForeignKey("Category")
                        .HasConstraintName("inventory_items_category_fk")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Egret.Models.CurrencyType", "SellcurrencyNavigation")
                        .WithMany("InventoryItemsSellcurrencyNavigation")
                        .HasForeignKey("Sellcurrency")
                        .HasConstraintName("inventory_items_sellcurrency_fk")
                        .HasPrincipalKey("Abbreviation")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Egret.Models.Unit", "SellunitNavigation")
                        .WithMany("InventoryItemsSellunitNavigation")
                        .HasForeignKey("Sellunit")
                        .HasConstraintName("inventory_items_sellunit_fk")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
