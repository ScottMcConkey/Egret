// <auto-generated />
using System;
using Egret.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Egret.Migrations
{
    [DbContext(typeof(EgretContext))]
    [Migration("20190117055759_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:adminpack", "'adminpack', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.accessgroups_id_seq", "'accessgroups_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.currencytypes_id_seq", "'currencytypes_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.inventorycategories_id_seq", "'inventorycategories_id_seq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.master_seq", "'master_seq', '', '1000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.units_id_seq", "'units_id_seq', '', '100', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Egret.DataAccess.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("Egret.Models.AccessGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('accessgroups_id_seq'::regclass)");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_accessgroups");

                    b.ToTable("accessgroups");

                    b.HasData(
                        new { Id = 1, Name = "Administrator" }
                    );
                });

            modelBuilder.Entity("Egret.Models.AccessGroupRole", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .HasColumnName("accessgroupid");

                    b.Property<string>("RoleId")
                        .HasColumnName("roleid");

                    b.HasKey("AccessGroupId", "RoleId")
                        .HasName("pk_accessgroup_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_accessgroup_roles_roleid");

                    b.ToTable("accessgroup_roles");

                    b.HasData(
                        new { AccessGroupId = 1, RoleId = "56cd6c97-9680-4dba-b79d-e136aafe1174" },
                        new { AccessGroupId = 1, RoleId = "26744734-6b71-4278-b800-c8f0540bf8a1" },
                        new { AccessGroupId = 1, RoleId = "e09dd759-4596-4dc7-890e-d89ddff760a3" },
                        new { AccessGroupId = 1, RoleId = "88013b04-32c0-4e91-8866-16440afaceb8" },
                        new { AccessGroupId = 1, RoleId = "a38ca821-87b7-4335-b22b-f234d94e298c" },
                        new { AccessGroupId = 1, RoleId = "5e7788e7-328a-4a02-968d-52cb24c70370" },
                        new { AccessGroupId = 1, RoleId = "84d85e3b-39fa-41e3-9de5-cb5b1ac8c691" },
                        new { AccessGroupId = 1, RoleId = "0fbb9db0-cdf3-4aa2-9fc3-5411eed81e2c" }
                    );
                });

            modelBuilder.Entity("Egret.Models.ConsumptionEvent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('master_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("addedby");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<string>("ConsumedBy")
                        .IsRequired()
                        .HasColumnName("consumedby");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateOfConsumption")
                        .IsRequired()
                        .HasColumnName("dateofconsumption");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("InventoryItemCode")
                        .IsRequired()
                        .HasColumnName("inventoryitemcode");

                    b.Property<string>("OrderNumber")
                        .HasColumnName("ordernumber");

                    b.Property<string>("PatternNumber")
                        .HasColumnName("patternnumber");

                    b.Property<decimal?>("QuantityConsumed")
                        .IsRequired()
                        .HasColumnName("quantityconsumed");

                    b.Property<string>("Unit")
                        .HasColumnName("unit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_consumption_events");

                    b.HasIndex("InventoryItemCode")
                        .HasName("ix_consumption_events_inventoryitemcode");

                    b.HasIndex("OrderNumber")
                        .HasName("ix_consumption_events_ordernumber");

                    b.HasIndex("Unit")
                        .HasName("ix_consumption_events_unit");

                    b.ToTable("consumption_events");
                });

            modelBuilder.Entity("Egret.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('currencytypes_id_seq'::regclass)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<bool>("DefaultSelection")
                        .HasColumnName("defaultselection");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sortorder");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currency_types");

                    b.HasAlternateKey("Abbreviation")
                        .HasName("ak_currency_types_abbreviation");

                    b.ToTable("currency_types");

                    b.HasData(
                        new { Id = 1, Abbreviation = "USD", Active = false, DefaultSelection = false, Name = "United States Dollars", SortOrder = 1, Symbol = "$" },
                        new { Id = 2, Abbreviation = "NRP", Active = true, DefaultSelection = true, Name = "Nepali Rupees", SortOrder = 2, Symbol = "रु" },
                        new { Id = 3, Abbreviation = "INR", Active = false, DefaultSelection = false, Name = "Indian Rupees", SortOrder = 3, Symbol = "₹" }
                    );
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('master_seq'::regclass)");

                    b.Property<string>("InventoryItemCode")
                        .HasColumnName("inventoryitemcode");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Result")
                        .HasColumnName("result");

                    b.HasKey("Id")
                        .HasName("pk_fabric_tests");

                    b.HasIndex("InventoryItemCode")
                        .HasName("ix_fabric_tests_inventoryitemcode");

                    b.ToTable("fabric_tests");
                });

            modelBuilder.Entity("Egret.Models.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('inventorycategories_id_seq'::regclass)");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sortorder");

                    b.HasKey("Id")
                        .HasName("pk_inventory_categories");

                    b.HasAlternateKey("Name")
                        .HasName("ak_inventory_categories_name");

                    b.ToTable("inventory_categories");

                    b.HasData(
                        new { Id = 1, Active = true, Description = "", Name = "Elastic", SortOrder = 1 },
                        new { Id = 2, Active = true, Description = "", Name = "Fastener", SortOrder = 2 },
                        new { Id = 3, Active = true, Description = "", Name = "Knit", SortOrder = 3 },
                        new { Id = 4, Active = true, Description = "", Name = "Labels and Tags", SortOrder = 4 },
                        new { Id = 5, Active = true, Description = "", Name = "Leather", SortOrder = 5 },
                        new { Id = 6, Active = true, Description = "", Name = "Other", SortOrder = 6 },
                        new { Id = 7, Active = true, Description = "", Name = "Thread", SortOrder = 7 },
                        new { Id = 8, Active = true, Description = "", Name = "Woven", SortOrder = 8 },
                        new { Id = 9, Active = true, Description = "", Name = "Zipper", SortOrder = 9 }
                    );
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code")
                        .HasDefaultValueSql("nextval('master_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("addedby");

                    b.Property<string>("ApproxProdQty")
                        .HasColumnName("approxprodqty");

                    b.Property<bool>("BondedWarehouse")
                        .HasColumnName("bondedwarehouse");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<string>("CustomerPurchasedFor")
                        .HasColumnName("customerpurchasedfor");

                    b.Property<string>("CustomerReservedFor")
                        .HasColumnName("customerreservedfor");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateArrived")
                        .HasColumnName("datearrived");

                    b.Property<DateTime?>("DateConfirmed")
                        .HasColumnName("dateconfirmed");

                    b.Property<DateTime?>("DateShipped")
                        .HasColumnName("dateshipped");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<decimal?>("FOBCost")
                        .HasColumnName("fobcost");

                    b.Property<string>("FOBCostCurrency")
                        .HasColumnName("fobcostcurrency");

                    b.Property<string>("ImportCostCurrency")
                        .HasColumnName("importcostcurrency");

                    b.Property<decimal?>("ImportCosts")
                        .HasColumnName("importcosts");

                    b.Property<DateTime?>("NeededBefore")
                        .HasColumnName("neededbefore");

                    b.Property<decimal?>("QtyPurchased")
                        .HasColumnName("qtypurchased");

                    b.Property<string>("QtyToPurchaseNow")
                        .HasColumnName("qtytopurchasenow");

                    b.Property<string>("ShippingCompany")
                        .HasColumnName("shippingcompany");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnName("shippingcost");

                    b.Property<string>("ShippingCostCurrency")
                        .HasColumnName("shippingcostcurrency");

                    b.Property<string>("Supplier")
                        .HasColumnName("supplier");

                    b.Property<string>("TargetPrice")
                        .HasColumnName("targetprice");

                    b.Property<string>("Unit")
                        .HasColumnName("unit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updatedby");

                    b.HasKey("Code")
                        .HasName("pk_inventory_items");

                    b.HasIndex("Category")
                        .HasName("ix_inventory_items_category");

                    b.HasIndex("FOBCostCurrency")
                        .HasName("ix_inventory_items_fobcostcurrency");

                    b.HasIndex("ImportCostCurrency")
                        .HasName("ix_inventory_items_importcostcurrency");

                    b.HasIndex("ShippingCostCurrency")
                        .HasName("ix_inventory_items_shippingcostcurrency");

                    b.HasIndex("Unit")
                        .HasName("ix_inventory_items_unit");

                    b.ToTable("inventory_items");
                });

            modelBuilder.Entity("Egret.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Egret.Models.PurchaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('master_seq'::regclass)");

                    b.Property<string>("AddedBy")
                        .HasColumnName("addedby");

                    b.Property<bool>("BondedWarehouse")
                        .HasColumnName("bondedwarehouse");

                    b.Property<string>("CustomerPurchasedFor")
                        .HasColumnName("customerpurchasedfor");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("FabricTesting")
                        .HasColumnName("fabrictesting");

                    b.Property<string>("QtyToPurchase")
                        .HasColumnName("qtytopurchase");

                    b.Property<string>("Supplier")
                        .HasColumnName("supplier");

                    b.Property<string>("TargetPrice")
                        .HasColumnName("targetprice");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updatedby");

                    b.HasKey("Id")
                        .HasName("pk_purchase_events");

                    b.ToTable("purchase_events");
                });

            modelBuilder.Entity("Egret.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnName("displayname");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalizedname")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnet_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("rolenameindex");

                    b.ToTable("aspnet_roles");

                    b.HasData(
                        new { Id = "56cd6c97-9680-4dba-b79d-e136aafe1174", DisplayName = "Item Create", Name = "Item_Create", NormalizedName = "ITEM_CREATE" },
                        new { Id = "26744734-6b71-4278-b800-c8f0540bf8a1", DisplayName = "Item Read", Name = "Item_Read", NormalizedName = "ITEM_READ" },
                        new { Id = "e09dd759-4596-4dc7-890e-d89ddff760a3", DisplayName = "Item Update", Name = "Item_Edit", NormalizedName = "ITEM_EDIT" },
                        new { Id = "88013b04-32c0-4e91-8866-16440afaceb8", DisplayName = "Item Delete", Name = "Item_Delete", NormalizedName = "ITEM_DELETE" },
                        new { Id = "a38ca821-87b7-4335-b22b-f234d94e298c", DisplayName = "Consumption Event Create", Name = "ConsumptionEvent_Create", NormalizedName = "CONSUMPTIONEVENT_CREATE" },
                        new { Id = "5e7788e7-328a-4a02-968d-52cb24c70370", DisplayName = "Consumption Event Read", Name = "ConsumptionEvent_Read", NormalizedName = "CONSUMPTIONEVENT_READ" },
                        new { Id = "84d85e3b-39fa-41e3-9de5-cb5b1ac8c691", DisplayName = "Consumption Event Update", Name = "ConsumptionEvent_Edit", NormalizedName = "CONSUMPTIONEVENT_EDIT" },
                        new { Id = "0fbb9db0-cdf3-4aa2-9fc3-5411eed81e2c", DisplayName = "Consumption Event Delete", Name = "ConsumptionEvent_Delete", NormalizedName = "CONSUMPTIONEVENT_DELETE" },
                        new { Id = "b3d15737-9e3f-48e6-9d9a-ef71436c07fa", DisplayName = "Administrator Access", Name = "Admin_Access", NormalizedName = "ADMIN_ACCESS" }
                    );
                });

            modelBuilder.Entity("Egret.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('units_id_seq'::regclass)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnName("sortorder");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasAlternateKey("Abbreviation")
                        .HasName("ak_units_abbreviation");

                    b.HasIndex("SortOrder")
                        .IsUnique()
                        .HasName("ix_units_sortorder");

                    b.ToTable("units");

                    b.HasData(
                        new { Id = 1, Abbreviation = "kg", Active = true, Name = "kilogram", SortOrder = 1 },
                        new { Id = 2, Abbreviation = "meter", Active = true, Name = "meter", SortOrder = 2 },
                        new { Id = 3, Abbreviation = "piece", Active = true, Name = "piece", SortOrder = 3 },
                        new { Id = 4, Abbreviation = "set", Active = true, Name = "set", SortOrder = 4 }
                    );
                });

            modelBuilder.Entity("Egret.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("emailconfirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalizedemail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalizedusername")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnet_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("usernameindex");

                    b.ToTable("aspnet_users");

                    b.HasData(
                        new { Id = "d9816771-309e-49ce-8f67-e64bc49c6572", AccessFailedCount = 0, ConcurrencyStamp = "2cebd9d0-694d-4ed3-8dc2-384f41557310", Email = "bob@example.com", EmailConfirmed = false, IsActive = true, LockoutEnabled = false, NormalizedEmail = "BOB@EXAMPLE.COM", NormalizedUserName = "BOB", PasswordHash = "AQAAAAEAACcQAAAAEI4jEmRsUYzL6KnpR2/OjIPvkI9BWNmnnCZYah1GFvB2EOCWkgkk49YqCJBz38N8rg==", PhoneNumberConfirmed = false, SecurityStamp = "3YILVFJYDKC4OK7QLLR4TO4KT6V4ZK5E", TwoFactorEnabled = false, UserName = "Bob" }
                    );
                });

            modelBuilder.Entity("Egret.Models.UserAccessGroup", b =>
                {
                    b.Property<int>("AccessGroupId")
                        .HasColumnName("accessgroupid");

                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("AccessGroupId", "UserId")
                        .HasName("pk_useraccessgroups");

                    b.HasIndex("UserId")
                        .HasName("ix_useraccessgroups_userid");

                    b.ToTable("useraccessgroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_roleclaims");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnet_roleclaims_roleid");

                    b.ToTable("aspnet_roleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_userclaims");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnet_userclaims_userid");

                    b.ToTable("aspnet_userclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnet_userlogins");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnet_userlogins_userid");

                    b.ToTable("aspnet_userlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnet_userroles");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnet_userroles_roleid");

                    b.ToTable("aspnet_userroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnet_usertokens");

                    b.ToTable("aspnet_usertokens");
                });

            modelBuilder.Entity("Egret.Models.AccessGroupRole", b =>
                {
                    b.HasOne("Egret.Models.AccessGroup", "AccessGroup")
                        .WithMany("AccessGroupRoles")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("fk_accessgroup_roles_accessgroups_accessgroupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Egret.Models.Role", "Role")
                        .WithMany("AccessGroupRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_accessgroup_roles_aspnet_roles_roleid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Egret.Models.ConsumptionEvent", b =>
                {
                    b.HasOne("Egret.Models.InventoryItem", "InventoryItemNavigation")
                        .WithMany("ConsumptionEventsNavigation")
                        .HasForeignKey("InventoryItemCode")
                        .HasConstraintName("fk_consumption_events_inventory_items_inventoryitemcode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Egret.Models.Order", "OrderNavigation")
                        .WithMany()
                        .HasForeignKey("OrderNumber")
                        .HasConstraintName("fk_consumption_events_orders_ordernumber");

                    b.HasOne("Egret.Models.Unit", "UnitNavigation")
                        .WithMany()
                        .HasForeignKey("Unit")
                        .HasConstraintName("fk_consumption_events_units_unit")
                        .HasPrincipalKey("Abbreviation")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Egret.Models.FabricTest", b =>
                {
                    b.HasOne("Egret.Models.InventoryItem", "InventoryItem")
                        .WithMany("FabricTestsNavigation")
                        .HasForeignKey("InventoryItemCode")
                        .HasConstraintName("fk_fabric_tests_inventory_items_inventoryitemcode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Egret.Models.InventoryItem", b =>
                {
                    b.HasOne("Egret.Models.InventoryCategory", "CategoryNavigation")
                        .WithMany()
                        .HasForeignKey("Category")
                        .HasConstraintName("fk_inventory_items_inventory_categories_category")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Egret.Models.CurrencyType", "FOBCostCurrencyNavigation")
                        .WithMany()
                        .HasForeignKey("FOBCostCurrency")
                        .HasConstraintName("fk_inventory_items_currency_types_fobcostcurrency")
                        .HasPrincipalKey("Abbreviation");

                    b.HasOne("Egret.Models.CurrencyType", "ImportCostCurrencyNavigation")
                        .WithMany()
                        .HasForeignKey("ImportCostCurrency")
                        .HasConstraintName("fk_inventory_items_currency_types_importcostcurrency")
                        .HasPrincipalKey("Abbreviation");

                    b.HasOne("Egret.Models.CurrencyType", "ShippingCostCurrencyNavigation")
                        .WithMany()
                        .HasForeignKey("ShippingCostCurrency")
                        .HasConstraintName("fk_inventory_items_currency_types_shippingcostcurrency")
                        .HasPrincipalKey("Abbreviation");

                    b.HasOne("Egret.Models.Unit", "UnitNavigation")
                        .WithMany()
                        .HasForeignKey("Unit")
                        .HasConstraintName("fk_inventory_items_units_unit")
                        .HasPrincipalKey("Abbreviation");
                });

            modelBuilder.Entity("Egret.Models.UserAccessGroup", b =>
                {
                    b.HasOne("Egret.Models.AccessGroup", "AccessGroup")
                        .WithMany("UserAccessGroups")
                        .HasForeignKey("AccessGroupId")
                        .HasConstraintName("fk_useraccessgroups_accessgroups_accessgroupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Egret.Models.User", "User")
                        .WithMany("UserAccessGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_useraccessgroups_aspnet_users_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Egret.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnet_roleclaims_aspnet_roles_roleid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnet_userclaims_aspnet_users_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnet_userlogins_aspnet_users_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Egret.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnet_userroles_aspnet_roles_roleid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnet_userroles_aspnet_users_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Egret.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnet_usertokens_aspnet_users_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
