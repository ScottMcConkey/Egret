@model PagingInfo
@using System.Text.RegularExpressions

@{ string path = Context.Request.Path.ToUriComponent(); }
@{ string querystring = Context.Request.QueryString.ToUriComponent(); }
@{ string newstring = ""; }
@{ int page = Model.CurrentPage; }
@{ int previousPage = Model.CurrentPage - 1; }
@{ int nextPage = Model.CurrentPage + 1; }
@{ string previousString = Regex.Replace(querystring, "&CurrentPage=[0-9]*", $"&CurrentPage={previousPage}");}
@{ string nextString = Regex.Replace(querystring, "&CurrentPage=[0-9]*", $"&CurrentPage={nextPage}");}

<div>
    @*Test @Model.TotalPages <br />
    Test @Model.TotalItems <br />
    Test @Model.CurrentPage <br />
    Test @Model.ItemsPerPage<br /><br />*@

    <ul class="pagination">
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : null)"><a class="page-link" href="@(path + previousString)">Previous</a></li>
        @for (int i = 0; i < Model.TotalPages; i++)
        {
            newstring = Regex.Replace(querystring, "&CurrentPage=[0-9]*", $"&CurrentPage={i + 1}");

            @if (Model.CurrentPage == (i + 1))
            {
                <li class="page-item active"><a class="page-link" href="@(path + newstring)">@(i + 1)</a></li>
            }
            else
            {
                <li class="page-item"><a class="page-link" href="@(path + newstring)">@(i + 1)</a></li>
            }
        }
        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : null)"><a class="page-link" href="@(path + nextString)">Next</a></li>
    </ul>

    <br />

</div>
